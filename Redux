*Install redux 

    npm install redux react-redux --save

* State is updated through Actions: arrow functions that return an object describing how state is to be modified 

    const increment = () => {
        return{
            type: 'INCREMENT'
        }
    }
    const incrementBy = (payload) => {
        return{
            type: 'INCREMENT_BY'
            payload
        }
    }

* to tie state and actions together, we write a function called a reducer: an arrow function that takes (initial) state and action as arguments, interpret actions through switch case and returns the next state of the app. 

    const counter = (state = 0, action) => {
        switch (action.type) {
            case "INCREMENT":
                return state + 1
            case "DECREMENT":
                return state -1
            case "INCREMENT_BY":
                return state + action.payload
        }
    }

* store is global source of truth. Store is to be initialized with combined reducers as parameter

    const allReducers = combineReducers({
        counterReducer, 
        loggedReducer
    })

    const store = createStore(allReducers)

In order to access store from any component: 

    *wrap <App /> inside <Provider store={store}></Provider>

https://medium.com/javascript-in-plain-english/the-only-introduction-to-redux-and-react-redux-youll-ever-need-8ce5da9e53c6

inside FUNCTIONAL component: 

    import {useSelector, useDispatch} from 'react-redux'
    const counter = useSelector(state => state.counter)
    const dispatch = useDispatch()
    dispatch(increment())

inside CLASS component

*import action from './action/path'

*at the end of the class:

const mapStateToProps = state => {
  return {
    propName: state.propName
  };
};

const mapDispatchToProps = {
  dispatchName: dispatchName[action creator imported above]
};

export default connect(mapStateToProps, mapDispatchToProps)(ClassName);

*can be used like 

this.props.propName
this.props.dispatchName

mapStateToProps is actually a function which takes the entire state of our app as its first argument and returns an object of data that our component will need, i.e. the first parameter is equivalent to store.getState() .

mapStateToProps takes an optional second argument, which lets you use some of the component props.

mapDispatchToProps used for mapping (injecting) action creators to the component’s props.

mapDispatchToProps can actually be either an object or a function. The official React Redux documentation recommends it to be an object and to be fairly honest, most of the time that’s what you’ll go with.